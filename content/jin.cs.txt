using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.IO;
using System.Linq;
using System.Text;
using System.Windows.Forms;

namespace handel2
{
    public partial class Form1 : Form
    {
        private Timer timer; // 定时器
        private bool isRunning = false; // 运行状态
        private List<string> stockCodes; // 从 stocks.txt 加载的股票代码
        private Dictionary<string, int> hyOpeningLimitCount; // 行业板块开盘涨停数
        private Dictionary<string, int> gnOpeningLimitCount; // 概念板块开盘涨停数
        private Dictionary<string, List<string>> hyPlateDict; // 行业板块映射
        private Dictionary<string, List<string>> gnPlateDict; // 概念板块映射
        private Dictionary<string, string> stockNames; // 股票代码与名称映射

        public Form1()
        {
            InitializeComponent();
            SetupDataGridViews(); // 设置 DataGridView 列
            LoadStockData(); // 加载所有数据
            timer = new Timer();
            timer.Interval = 3000; // 每 3 秒更新一次
            timer.Tick += Timer_Tick; // 绑定定时器事件
        }

        /// <summary>
        /// 设置 DataGridView 的列
        /// </summary>
        private void SetupDataGridViews()
        {
            // 设置 datahy（行业板块）的列
            datahy.Columns.Add(new DataGridViewTextBoxColumn { HeaderText = "序号" });
            datahy.Columns.Add(new DataGridViewTextBoxColumn { HeaderText = "行业板块" });
            datahy.Columns.Add(new DataGridViewTextBoxColumn { HeaderText = "涨停" });
            datahy.Columns.Add(new DataGridViewTextBoxColumn { HeaderText = "开盘" });
            datahy.Columns.Add(new DataGridViewTextBoxColumn { HeaderText = "股票代码" });
            datahy.Columns.Add(new DataGridViewTextBoxColumn { HeaderText = "股票名称" });

            // 设置 datagn（概念板块）的列
            datagn.Columns.Add(new DataGridViewTextBoxColumn { HeaderText = "序号" });
            datagn.Columns.Add(new DataGridViewTextBoxColumn { HeaderText = "概念板块" });
            datagn.Columns.Add(new DataGridViewTextBoxColumn { HeaderText = "涨停" });
            datagn.Columns.Add(new DataGridViewTextBoxColumn { HeaderText = "开盘" });
            datagn.Columns.Add(new DataGridViewTextBoxColumn { HeaderText = "股票代码" });
            datagn.Columns.Add(new DataGridViewTextBoxColumn { HeaderText = "股票名称" });
        }

        /// <summary>
        /// 加载所有股票和板块数据
        /// </summary>
        private void LoadStockData()
        {
            stockCodes = LoadStockCodes("stocks.txt");
            stockNames = LoadStockNames("output.csv");
            hyPlateDict = LoadIndustryPlateData("行业板块.csv");
            gnPlateDict = LoadConceptPlateData("概念板块.csv");
            Console.WriteLine($"Loaded {stockCodes.Count} stock codes.");
            Console.WriteLine($"Loaded {stockNames.Count} stock names.");
            Console.WriteLine($"Loaded {hyPlateDict.Count} stocks for industry plates.");
            Console.WriteLine($"Loaded {gnPlateDict.Count} stocks for concept plates.");
        }

        /// <summary>
        /// 从 stocks.txt 加载股票代码
        /// </summary>
        private List<string> LoadStockCodes(string filePath)
        {
            var codes = new List<string>();
            try
            {
                codes = File.ReadAllLines(filePath, Encoding.UTF8).ToList();
            }
            catch (Exception ex)
            {
                MessageBox.Show($"加载 {filePath} 失败：{ex.Message}");
            }
            return codes;
        }

        /// <summary>
        /// 从 output.csv 加载股票名称
        /// </summary>
        private Dictionary<string, string> LoadStockNames(string filePath)
        {
            var names = new Dictionary<string, string>();
            try
            {
                var lines = File.ReadAllLines(filePath, Encoding.UTF8);
                foreach (var line in lines.Skip(1)) // 跳过标题行
                {
                    var parts = line.Split(',');
                    if (parts.Length >= 10)
                    {
                        string code = parts[7].Trim(); // code 字段
                        string name = parts[1].Trim(); // name 字段
                        names[code] = name;
                    }
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show($"加载 {filePath} 失败：{ex.Message}");
            }
            return names;
        }

        /// <summary>
        /// 加载行业板块数据
        /// </summary>
        private Dictionary<string, List<string>> LoadIndustryPlateData(string filePath)
        {
            var plateDict = new Dictionary<string, List<string>>();
            try
            {
                var lines = File.ReadAllLines(filePath, Encoding.GetEncoding("GBK"));
                if (lines.Length < 2)
                {
                    throw new Exception("行业板块.csv 文件格式不正确");
                }

                // 第一行列标题（行业板块名称）
                var headers = lines[0].Split(',').Select(h => h.Trim()).ToArray();

                // 遍历每一行（股票代码）
                for (int i = 1; i < lines.Length; i++)
                {
                    var parts = lines[i].Split(',');
                    for (int j = 0; j < parts.Length && j < headers.Length; j++)
                    {
                        string stockCode = parts[j].Trim();
                        string plate = headers[j];
                        if (!string.IsNullOrEmpty(stockCode) && !string.IsNullOrEmpty(plate))
                        {
                            if (!plateDict.ContainsKey(stockCode))
                            {
                                plateDict[stockCode] = new List<string>();
                            }
                            plateDict[stockCode].Add(plate);
                        }
                    }
                }
                Console.WriteLine($"Loaded {plateDict.Count} stocks for industry plates.");
            }
            catch (Exception ex)
            {
                MessageBox.Show($"加载 {filePath} 失败：{ex.Message}");
            }
            return plateDict;
        }

        /// <summary>
        /// 加载概念板块数据
        /// </summary>
        private Dictionary<string, List<string>> LoadConceptPlateData(string filePath)
        {
            var plateDict = new Dictionary<string, List<string>>();
            try
            {
                var lines = File.ReadAllLines(filePath, Encoding.GetEncoding("GBK"));
                var headers = lines[0].Split(','); // 首行为概念名称
                for (int i = 1; i < lines.Length; i++)
                {
                    var parts = lines[i].Split(',');
                    for (int j = 1; j < parts.Length && j < headers.Length; j++)
                    {
                        string stockCode = parts[j].Trim();
                        string plate = headers[j].Trim();
                        if (!string.IsNullOrEmpty(stockCode) && !string.IsNullOrEmpty(plate))
                        {
                            if (!plateDict.ContainsKey(stockCode))
                                plateDict[stockCode] = new List<string>();
                            plateDict[stockCode].Add(plate);
                        }
                    }
                }
                Console.WriteLine($"Loaded {plateDict.Count} stocks for concept plates.");
            }
            catch (Exception ex)
            {
                MessageBox.Show($"加载 {filePath} 失败：{ex.Message}");
            }
            return plateDict;
        }

        /// <summary>
        /// btnStart 点击事件
        /// </summary>
        private void btnStart_Click(object sender, EventArgs e)
        {
            if (!isRunning)
            {
                isRunning = true;
                btnStart.Text = "停止";
                timer.Start();
                // 第一次运行时统计开盘涨停数
                hyOpeningLimitCount = GetOpeningLimitCount(hyPlateDict);
                gnOpeningLimitCount = GetOpeningLimitCount(gnPlateDict);
            }
            else
            {
                isRunning = false;
                btnStart.Text = "开始";
                timer.Stop();
            }
        }

        /// <summary>
        /// 定时器触发事件
        /// </summary>
        private void Timer_Tick(object sender, EventArgs e)
        {
            UpdateDataGridViews();
        }

        /// <summary>
        /// 获取涨停股票列表
        /// </summary>
        private List<string> GetLimitUpStocks()
        {
            var limitStocks = new List<string>();
            try
            {
                var lines = File.ReadAllLines("output.csv", Encoding.UTF8);
                foreach (var line in lines.Skip(1))
                {
                    var parts = line.Split(',');
                    if (parts.Length >= 10)
                    {
                        string code = parts[7].Trim();
                        if (stockCodes.Contains(code) && double.TryParse(parts[9].Trim(), out double ratio))
                        {
                            // 修正后的涨停判断逻辑
                            bool isLimit =
                                // 沪市主板（60）或深市主板（00）：涨幅>=9.9%
                                (code.StartsWith("60") || code.StartsWith("00")) && ratio >= 9.9 ||
                                // 创业板（30）：涨幅>=19.9%
                                (code.StartsWith("30") && ratio >= 19.9);

                            if (isLimit)
                            {
                                limitStocks.Add(code);
                            }
                        }
                    }
                }
                Console.WriteLine($"Found {limitStocks.Count} limit up stocks.");
            }
            catch (Exception ex)
            {
                MessageBox.Show($"读取 output.csv 失败：{ex.Message}");
            }
            return limitStocks;
        }

        /// <summary>
        /// 统计开盘涨停数
        /// </summary>
        private Dictionary<string, int> GetOpeningLimitCount(Dictionary<string, List<string>> plateDict)
        {
            var limitStocks = GetLimitUpStocks();
            var countDict = new Dictionary<string, int>();
            foreach (var stock in limitStocks)
            {
                if (plateDict.ContainsKey(stock))
                {
                    foreach (var plate in plateDict[stock])
                    {
                        countDict[plate] = countDict.ContainsKey(plate) ? countDict[plate] + 1 : 1;
                    }
                }
            }
            return countDict;
        }

        /// <summary>
        /// 更新 DataGridView
        /// </summary>
        private void UpdateDataGridViews()
        {
            var limitStocks = GetLimitUpStocks();
            var hyCountDict = new Dictionary<string, int>();
            var gnCountDict = new Dictionary<string, int>();
            var hyStockListDict = new Dictionary<string, List<string>>();
            var gnStockListDict = new Dictionary<string, List<string>>();

            foreach (var stock in limitStocks)
            {
                if (hyPlateDict.ContainsKey(stock))
                {
                    foreach (var plate in hyPlateDict[stock])
                    {
                        hyCountDict[plate] = hyCountDict.ContainsKey(plate) ? hyCountDict[plate] + 1 : 1;
                        if (!hyStockListDict.ContainsKey(plate))
                            hyStockListDict[plate] = new List<string>();
                        hyStockListDict[plate].Add(stock);
                    }
                }
                if (gnPlateDict.ContainsKey(stock))
                {
                    foreach (var plate in gnPlateDict[stock])
                    {
                        gnCountDict[plate] = gnCountDict.ContainsKey(plate) ? gnCountDict[plate] + 1 : 1;
                        if (!gnStockListDict.ContainsKey(plate))
                            gnStockListDict[plate] = new List<string>();
                        gnStockListDict[plate].Add(stock);
                    }
                }
            }

            // 更新 datahy（行业板块）
            datahy.Rows.Clear();
            var hySorted = hyCountDict.OrderByDescending(kvp => kvp.Value);
            int hyIndex = 1;
            foreach (var kvp in hySorted)
            {
                string plate = kvp.Key;
                int currentCount = kvp.Value;
                int openingCount = hyOpeningLimitCount.ContainsKey(plate) ? hyOpeningLimitCount[plate] : 0;
                string stockCodesStr = string.Join(", ", hyStockListDict[plate]);
                string stockNamesStr = string.Join(", ", hyStockListDict[plate].Select(code => stockNames.ContainsKey(code) ? stockNames[code] : code));
                datahy.Rows.Add(hyIndex++, plate, currentCount, openingCount, stockCodesStr, stockNamesStr);
            }
            Console.WriteLine($"Found {hyCountDict.Count} industry plates with limit up stocks.");

            // 更新 datagn（概念板块）
            datagn.Rows.Clear();
            var gnSorted = gnCountDict.OrderByDescending(kvp => kvp.Value);
            int gnIndex = 1;
            foreach (var kvp in gnSorted)
            {
                string plate = kvp.Key;
                int currentCount = kvp.Value;
                int openingCount = gnOpeningLimitCount.ContainsKey(plate) ? gnOpeningLimitCount[plate] : 0;
                string stockCodesStr = string.Join(", ", gnStockListDict[plate]);
                string stockNamesStr = string.Join(", ", gnStockListDict[plate].Select(code => stockNames.ContainsKey(code) ? stockNames[code] : code));
                datagn.Rows.Add(gnIndex++, plate, currentCount, openingCount, stockCodesStr, stockNamesStr);
            }
            Console.WriteLine($"Found {gnCountDict.Count} concept plates with limit up stocks.");
        }
    }
}
