//generate output.csv every 3 seconds
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Net.Http;
using System.Text;
using System.Windows.Forms;

namespace outputGen
{
    public partial class Form1 : Form
    {
        private List<string> stocks; // 股票代码列表
        private bool isRunning = false; // 是否正在运行
        private bool isFetching = false; // 是否正在获取数据
        private HttpClient httpClient; // HTTP 客户端
        private int loopCount = 0; // 循环计数器

        public Form1()
        {
            InitializeComponent();

            // 初始化 HttpClient
            httpClient = new HttpClient();

            // 设置计时器间隔为 1 秒，初始禁用
            timer1.Interval = 2000;
            timer1.Enabled = false;
            timer1.Tick += timer1_Tick;

            // 设置按钮初始文本
            button1.Text = "开始";
            button1.Click += new EventHandler(button1_Click);
        }

        // 窗体加载事件
        private void Form1_Load(object sender, EventArgs e)
        {
            try
            {
                // 读取股票代码文件
                var stockLines = File.ReadAllLines(Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "stocks.txt")).Select(line => line.Trim()).ToList();
                stocks = new List<string>();

                foreach (var line in stockLines)
                {
                    if (string.IsNullOrEmpty(line))
                        continue;

                    if (line.StartsWith("6") || line.StartsWith("9"))
                    {
                        stocks.Add("sh" + line); // 上海股市
                    }
                    else if (line.StartsWith("0") || line.StartsWith("2") || line.StartsWith("3"))
                    {
                        stocks.Add("sz" + line); // 深圳股市
                    }
                    else
                    {
                        stocks.Add(line); // 未知代码
                    }
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show($"读取股票文件失败: {ex.Message}");
                stocks = new List<string>();
            }
        }

        // 按钮点击事件
        private void button1_Click(object sender, EventArgs e)
        {
            if (isRunning)
            {
                isRunning = false;
                timer1.Stop();
                button1.Text = "开始";
            }
            else
            {
                isRunning = true;
                timer1.Start();
                button1.Text = "停止";
            }
        }

        // 计时器触发事件
        private async void timer1_Tick(object sender, EventArgs e)
        {
            if (isFetching)
                return;

            isFetching = true;
            try
            {
                loopCount++;
                label1.Text = $"已循环 {loopCount} 次";

                List<string[]> list = new List<string[]>();
                int batchSize = 880;
                int n = stocks.Count;
                int batchCount = (n + batchSize - 1) / batchSize;

                for (int i = 0; i < batchCount; i++)
                {
                    int start = i * batchSize;
                    int end = Math.Min(start + batchSize, n);
                    List<string> batchStocks = stocks.GetRange(start, end - start);
                    string codes = string.Join(",", batchStocks);
                    string url = $"http://qt.gtimg.cn/q={codes}";

                    string response = await httpClient.GetStringAsync(url);
                    string[] lines = response.Split(new[] { '\n', '\r' }, StringSplitOptions.RemoveEmptyEntries);

                    foreach (string line in lines)
                    {
                        if (line.Length > 2 && line.StartsWith("v_") && line.EndsWith(";"))
                        {
                            string data = line.Substring(2, line.Length - 3); // 去掉 "v_" 和 ";"
                            string[] fields = data.Split('~');

                            if (fields.Length >= 37) // 确保字段数量足够
                            {
                                string code = fields[2];    // 股票代码
                                string name = fields[1];    // 股票名称
                                string price = fields[3];   // 当前价格
                                string pre_close = fields[4]; // 昨收
                                string open = fields[5];    // 今开
                                string amount = fields[57]; // 成交额

                                // 提取并格式化时间
                                string timestamp = fields[30]; // 例如 "20250226132739"
                                string time = "N/A";
                                if (timestamp.Length >= 14)
                                {
                                    string timePart = timestamp.Substring(8, 6); // 提取 "132739"
                                    time = $"{timePart.Substring(0, 2)}:{timePart.Substring(2, 2)}:{timePart.Substring(4, 2)}"; // "13:27:39"
                                }

                                double openRatio = 0, ratio = 0;
                                if (double.TryParse(pre_close, out double preCloseVal) && preCloseVal != 0)
                                {
                                    if (double.TryParse(open, out double openVal))
                                        openRatio = (openVal / preCloseVal - 1) * 100;
                                    if (double.TryParse(price, out double priceVal))
                                        ratio = (priceVal / preCloseVal - 1) * 100;
                                }

                                list.Add(new string[]
                                {
                                    EscapeCsvField(name),
                                    open,
                                    pre_close,
                                    price,
                                    amount,
                                    time, // 使用格式化后的时间
                                    code,
                                    openRatio.ToString("0.00"),
                                    ratio.ToString("0.00")
                                });
                            }
                        }
                    }
                }

                StringBuilder sb = new StringBuilder();
                sb.AppendLine("id,name,open,pre_close,price,amount,time,code,open_ratio,ratio");

                int id = 1;
                foreach (var row in list)
                {
                    sb.AppendLine($"{id},{string.Join(",", row)}");
                    id++;
                }

                string outputPath = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "output.csv");
                File.WriteAllText(outputPath, sb.ToString(), Encoding.GetEncoding("UTF-8"));
            }
            catch (Exception ex)
            {
                MessageBox.Show($"错误: {ex.Message}");
            }
            finally
            {
                isFetching = false;
            }
        }

        // 处理 CSV 字段中的特殊字符
        private string EscapeCsvField(string field)
        {
            if (string.IsNullOrEmpty(field))
                return "";
            if (field.Contains(",") || field.Contains("\"") || field.Contains("\n"))
            {
                field = field.Replace("\"", "\"\"");
                return "\"" + field + "\"";
            }
            return field;
        }

        // 清理资源
        protected void DisposeResources()
        {
            if (httpClient != null)
            {
                httpClient.Dispose();
                httpClient = null;
            }
        }
    }
}
