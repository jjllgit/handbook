using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace save10zt
{
    public partial class Form1 : Form
    {
        private const string ShDirectory = @"D:\Program Files\TDX2\vipdoc\sh\lday";
        private const string SzDirectory = @"D:\Program Files\TDX2\vipdoc\sz\lday";
        private const string StocksFilePath = "stocks.txt";

        // 字典存储股票代码和对应的每日涨幅数据
        private Dictionary<string, List<DailyGrowth>> stockDailyGrowths = new Dictionary<string, List<DailyGrowth>>();

        public Form1()
        {
            InitializeComponent();
        }

        private void Form1_Load(object sender, EventArgs e)
        {
            // 检查股票列表文件是否存在
            if (!File.Exists(StocksFilePath))
            {
                MessageBox.Show("股票列表文件不存在，请确保stocks.txt文件在程序目录下！", "错误", MessageBoxButtons.OK, MessageBoxIcon.Error);
                startButton.Enabled = false;
            }
        }

        private void startButton_Click(object sender, EventArgs e)
        {
            // 清空之前的结果
            stockDailyGrowths.Clear();

            // 启动处理
            ProcessStockList();

            // 启用导出按钮
            if (stockDailyGrowths.Count > 0)
            {
                exportButton.Enabled = true;
            }
            else
            {
                MessageBox.Show("没有处理到有效的股票数据", "提示", MessageBoxButtons.OK, MessageBoxIcon.Information);
                exportButton.Enabled = false;
            }
        }

        private void ProcessStockList()
        {
            try
            {
                string[] stockCodes = File.ReadAllLines(StocksFilePath);
                progressBar.Maximum = stockCodes.Length;
                progressBar.Value = 0;
                statusLabel.Text = "开始处理股票数据...";

                foreach (string stockCode in stockCodes)
                {
                    string trimmedCode = stockCode.Trim();
                    if (string.IsNullOrEmpty(trimmedCode))
                        continue;

                    // 判断股票代码是沪市还是深市
                    string directory = (trimmedCode.StartsWith("6") || trimmedCode.StartsWith("5")) ? ShDirectory : SzDirectory;
                    string prefix = (trimmedCode.StartsWith("6") || trimmedCode.StartsWith("5")) ? "sh" : "sz";
                    string filePath = Path.Combine(directory, $"{prefix}{trimmedCode}.day");

                    if (File.Exists(filePath))
                    {
                        List<DailyGrowth> dailyGrowths = CalculateDailyGrowthRates(filePath, $"{prefix}{trimmedCode}");
                        if (dailyGrowths.Count > 0)
                        {
                            stockDailyGrowths.Add($"{prefix}{trimmedCode}", dailyGrowths);
                        }

                        // 更新进度条
                        progressBar.Value++;
                        statusLabel.Text = $"处理进度: {progressBar.Value}/{progressBar.Maximum}";
                        Application.DoEvents(); // 允许UI更新
                    }
                }

                statusLabel.Text = "处理完成";
            }
            catch (Exception ex)
            {
                MessageBox.Show($"处理股票列表时出错: {ex.Message}", "错误", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private List<DailyGrowth> CalculateDailyGrowthRates(string filePath, string stockCode)
        {
            List<DailyGrowth> result = new List<DailyGrowth>();

            try
            {
                // 读取日线数据文件
                byte[] fileData = File.ReadAllBytes(filePath);

                // 确保文件至少有11天的数据（计算10天涨幅需要11天收盘价）
                int recordLength = 32; // 每条记录32字节
                int totalRecords = fileData.Length / recordLength;

                if (totalRecords < 11)
                {
                    return result;
                }

                // 获取最近11天的数据
                List<StockDayData> recentData = new List<StockDayData>();
                int startIndex = Math.Max(0, totalRecords - 11) * recordLength;

                for (int i = 0; i < 11 && startIndex < fileData.Length; i++)
                {
                    byte[] record = new byte[recordLength];
                    Array.Copy(fileData, startIndex, record, 0, recordLength);

                    StockDayData dayData = ReadDayData(record);
                    recentData.Add(dayData);

                    startIndex += recordLength;
                }

                // 确保数据按日期排序
                recentData = recentData.OrderBy(d => d.Date).ToList();

                // 计算近10天每天的涨幅
                if (recentData.Count >= 11)
                {
                    for (int i = 1; i < 11; i++)
                    {
                        double previousClose = recentData[i - 1].ClosePrice;
                        double currentClose = recentData[i].ClosePrice;

                        double growthRate = (currentClose - previousClose) / previousClose * 100;

                        result.Add(new DailyGrowth
                        {
                            StockCode = stockCode,
                            Date = FormatDate(recentData[i].Date),
                            GrowthRate = Math.Round(growthRate, 2)
                        });
                    }
                }

                return result;
            }
            catch (Exception)
            {
                return result;
            }
        }

        private string FormatDate(uint date)
        {
            // 将YYYYMMDD格式转换为YYYY-MM-DD格式
            string dateStr = date.ToString();
            if (dateStr.Length == 8)
            {
                return $"{dateStr.Substring(0, 4)}-{dateStr.Substring(4, 2)}-{dateStr.Substring(6, 2)}";
            }
            return dateStr;
        }

        private StockDayData ReadDayData(byte[] data)
        {
            // 通达信日线数据格式解析
            StockDayData dayData = new StockDayData();

            dayData.Date = BitConverter.ToUInt32(data, 0);
            dayData.OpenPrice = BitConverter.ToUInt32(data, 4) / 100.0;
            dayData.HighPrice = BitConverter.ToUInt32(data, 8) / 100.0;
            dayData.LowPrice = BitConverter.ToUInt32(data, 12) / 100.0;
            dayData.ClosePrice = BitConverter.ToUInt32(data, 16) / 100.0;
            dayData.Volume = BitConverter.ToSingle(data, 20) / 10.0;
            dayData.Amount = BitConverter.ToUInt32(data, 24);
            dayData.Reserved = BitConverter.ToUInt32(data, 28);

            return dayData;
        }

        private void exportButton_Click(object sender, EventArgs e)
        {
            SaveFileDialog saveDialog = new SaveFileDialog();
            saveDialog.Filter = "CSV文件 (*.csv)|*.csv|所有文件 (*.*)|*.*";
            saveDialog.DefaultExt = "csv";
            saveDialog.FileName = "daily_stock_growth_rates";

            if (saveDialog.ShowDialog() == DialogResult.OK)
            {
                try
                {
                    // 获取所有不同的日期
                    HashSet<string> allDates = new HashSet<string>();
                    foreach (var stockData in stockDailyGrowths.Values)
                    {
                        foreach (var dailyGrowth in stockData)
                        {
                            allDates.Add(dailyGrowth.Date);
                        }
                    }

                    // 排序日期并选取最近10天
                    List<string> sortedDates = allDates.OrderBy(d => d).ToList();
                    List<string> recentDates = sortedDates.Skip(Math.Max(0, sortedDates.Count - 10)).ToList();

                    using (StreamWriter writer = new StreamWriter(saveDialog.FileName, false, Encoding.UTF8))
                    {
                        // 写入CSV表头
                        writer.Write("股票代码,");
                        writer.WriteLine(string.Join(",", recentDates));

                        // 写入每支股票的数据
                        foreach (var stock in stockDailyGrowths)
                        {
                            // 去掉股票代码前面的“sz”或“sh”
                            string stockCode = stock.Key.Substring(2);
                            writer.Write(stockCode + ",");

                            for (int i = 0; i < recentDates.Count; i++)
                            {
                                var growth = stock.Value.FirstOrDefault(g => g.Date == recentDates[i]);
                                if (growth != null)
                                {
                                    writer.Write($"{growth.GrowthRate:F2}%");
                                }
                                else
                                {
                                    writer.Write("N/A");
                                }

                                if (i < recentDates.Count - 1)
                                {
                                    writer.Write(",");
                                }
                            }

                            writer.WriteLine();
                        }
                    }

                    MessageBox.Show($"数据已成功导出到: {saveDialog.FileName}", "导出成功", MessageBoxButtons.OK, MessageBoxIcon.Information);
                }
                catch (Exception ex)
                {
                    MessageBox.Show($"导出数据时出错: {ex.Message}", "错误", MessageBoxButtons.OK, MessageBoxIcon.Error);
                }
            }
        }
    }

    // 日线数据结构
    public class StockDayData
    {
        public uint Date { get; set; }          // 日期，格式为YYYYMMDD，如20250221
        public double OpenPrice { get; set; }   // 开盘价
        public double HighPrice { get; set; }   // 最高价
        public double LowPrice { get; set; }    // 最低价
        public double ClosePrice { get; set; }  // 收盘价
        public double Volume { get; set; }      // 成交量
        public uint Amount { get; set; }        // 成交额
        public uint Reserved { get; set; }      // 保留值
    }

    // 每日涨幅数据结构
    public class DailyGrowth
    {
        public string StockCode { get; set; }   // 股票代码
        public string Date { get; set; }        // 日期
        public double GrowthRate { get; set; }  // 涨幅百分比
    }
}