using System;
using System.IO;
using System.Text;
using System.Collections.Generic;
using System.Linq;
using System.Windows.Forms;

namespace test2
{
    public partial class Form1 : Form
    {
        public Form1()
        {
            InitializeComponent();
        }

        // 预处理按钮点击事件
        private void btnPre_Click(object sender, EventArgs e)
        {
            try
            {
                // 1. 处理概念板块数据
                ProcessBlockGnDat();

                // 2. 处理指数配置文件
                ProcessTdxzsCfg();

                // 3. 生成股票列表
                ProcessStockList();

                // 4. 新增：生成行业板块CSV
                ProcessIndustrySectors();

                MessageBox.Show("预处理完成！");
            }
            catch (Exception ex)
            {
                MessageBox.Show($"预处理失败：{ex.Message}");
            }
        }

        // 处理概念板块数据
        private void ProcessBlockGnDat()
        {
            const string filePath = @"D:\Program Files\TDX2\T0002\hq_cache\block_gn.dat";
            byte[] buffer = File.ReadAllBytes(filePath);

            int step = 2813;
            int head = 386;
            int totalLength = buffer.Length;
            int blockCount = totalLength / step;

            List<string> plateNames = new List<string>();
            List<List<string>> allStocks = new List<List<string>>();

            Encoding gbEncoding = Encoding.GetEncoding("GBK");

            for (int i = 0; i < blockCount; i++)
            {
                int basis = head + i * step;

                // 解析板块名称
                byte[] nameBytes = new byte[8];
                Array.Copy(buffer, basis, nameBytes, 0, 8);
                string name = gbEncoding.GetString(nameBytes).TrimEnd('\0');
                plateNames.Add(name);

                // 解析股票代码
                List<string> stocks = new List<string>();
                for (int k = 0; k < 2800; k += 7)
                {
                    int offset = basis + 13 + k;
                    if (offset + 6 >= buffer.Length) break;

                    byte[] stockBytes = new byte[6];
                    Array.Copy(buffer, offset, stockBytes, 0, 6);
                    string stock = gbEncoding.GetString(stockBytes).TrimEnd('\0');
                    stocks.Add(string.IsNullOrWhiteSpace(stock) ? "" : stock);
                }

                // 填充到400个
                while (stocks.Count < 400) stocks.Add("");
                allStocks.Add(stocks);
            }

            // 程序所在目录
            string outputPath = Path.Combine(Application.StartupPath, "概念板块.csv");
            string backupPath = Path.Combine(Application.StartupPath, "概念板块.bak");

            // 判断是否存在同名文件，若存在则备份
            if (File.Exists(outputPath))
            {
                if (File.Exists(backupPath))
                    File.Delete(backupPath);
                File.Move(outputPath, backupPath);
            }

            // 写入CSV文件到程序目录
            using (StreamWriter writer = new StreamWriter(outputPath, false, gbEncoding))
            {
                writer.WriteLine(string.Join(",", plateNames));

                for (int row = 0; row < 400; row++)
                {
                    List<string> rowData = new List<string>();
                    foreach (var stocks in allStocks)
                    {
                        rowData.Add(row < stocks.Count ? stocks[row] : "");
                    }
                    writer.WriteLine(string.Join(",", rowData));
                }
            }
        }

        // 处理行业配置文件
        private void ProcessTdxzsCfg()
        {
            Dictionary<string, string> replaceRules = new Dictionary<string, string>()
            {
                {"煤炭开采", "煤炭"},
                {"焦炭加工", "煤炭"},
                {"水力发电", "电力"},
                {"火力发电", "电力"},
                {"新型电力", "电力"},
                {"石油开采", "石油"},
                {"石油加工", "石油"},
                {"石油贸易", "石油"},
                {"普钢", "钢铁"},
                {"特种钢", "钢铁"},
                {"钢加工", "钢铁"},
                {"铜", "有色"},
                {"铝", "有色"},
                {"铅锌", "有色"},
                {"黄金", "有色"},
                {"小金属", "有色"},
                {"化工原料", "化工"},
                {"农药化肥", "化工"},
                {"塑料", "化工"},
                {"橡胶", "化工"},
                {"染料涂料", "化工"},
                {"陶瓷", "建材"},
                {"水泥", "建材"},
                {"玻璃", "建材"},
                {"其他建材", "建材"},
                {"种植业", "农林牧渔"},
                {"渔业", "农林牧渔"},
                {"林业", "农林牧渔"},
                {"饲料", "农林牧渔"},
                {"农业综合", "农林牧渔"},
                {"纺织|880368", "纺织服饰|880368"},
                {"服饰|880369", "纺织服饰|880369"},
                {"乳制品", "食品饮料"},
                {"软饮料", "食品饮料"},
                {"食品|880375", "食品饮料|880375"},
                {"白酒", "酿酒"},
                {"啤酒", "酿酒"},
                {"红黄酒", "酿酒"},
                {"汽车整车", "汽车类"},
                {"汽车配件", "汽车类"},
                {"汽车服务", "汽车类"},
                {"摩托车", "汽车类"},
                {"化学制药", "医药"},
                {"生物制药", "医药"},
                {"中成药", "医药"},
                {"百货", "商业连锁"},
                {"超市连锁", "商业连锁"},
                {"电器连锁", "商业连锁"},
                {"医药商业", "商业连锁"},
                {"其他商业", "商业连锁"},
                {"商品城", "商业连锁"},
                {"批发业", "商业连锁"},
                {"出版业", "传媒娱乐"},
                {"影视音像", "传媒娱乐"},
                {"旅游服务", "旅游"},
                {"旅游景点", "旅游"},
                {"机床制造", "通用机械"},
                {"机械基件", "通用机械"},
                {"化工机械", "工业机械"},
                {"轻工机械", "工业机械"},
                {"纺织机械", "工业机械"},
                {"农用机械", "工业机械"},
                {"专用机械", "工业机械"},
                {"铁路", "运输服务"},
                {"水运", "运输服务"},
                {"空运", "运输服务"},
                {"公路", "运输服务"},
                {"路桥", "交通设施"},
                {"机场", "交通设施"},
                {"港口", "交通设施"},
                {"建筑工程", "建筑"},
                {"装修装饰", "建筑"},
                {"全国地产", "房地产"},
                {"区域地产", "房地产"},
                {"园区开发", "房地产"},
                {"房产服务", "房地产"}
            };

            string[] lines = File.ReadAllLines(
                @"D:\Program Files\TDX2\T0002\hq_cache\tdxzs.cfg",
                Encoding.GetEncoding("GBK"));

            using (StreamWriter writer = new StreamWriter(@"D:\Program Files\TDX2\T0002\hq_cache\tdxzs2.cfg", false,
                Encoding.GetEncoding("GBK")))
            {
                foreach (string line in lines)
                {
                    string processedLine = line;
                    foreach (var rule in replaceRules)
                    {
                        processedLine = processedLine.Replace(rule.Key, rule.Value);
                    }
                    writer.WriteLine(processedLine);
                }
            }
        }

        // 生成股票列表
        private void ProcessStockList()
        {
            // 获取程序所在目录
            string baseDir = AppDomain.CurrentDomain.BaseDirectory;
            string bakFile = Path.Combine(baseDir, "stocks.bak");
            string txtFile = Path.Combine(baseDir, "stocks.txt");

            // 备份原文件
            if (File.Exists(bakFile))
                File.Delete(bakFile);

            if (File.Exists(txtFile))
                File.Move(txtFile, bakFile);

            // 生成新文件
            string[] lines = File.ReadAllLines(
                @"D:\Program Files\TDX2\T0002\blocknew\TJG.blk",
                Encoding.Default);

            using (StreamWriter writer = new StreamWriter(txtFile, false))
            {
                foreach (string line in lines)
                {
                    if (line.Length > 0)
                    {
                        writer.WriteLine(line.Substring(1));
                    }
                }
            }
        }
        // 新增：处理行业板块数据
        private void ProcessIndustrySectors()
        {
            // 创建行业编码和名称的映射
            Dictionary<string, string> industryCodeToName = new Dictionary<string, string>();

            // 读取行业指数配置文件 tdxzs.cfg
            string[] tdxzsLines = File.ReadAllLines(
                @"D:\Program Files\TDX2\T0002\hq_cache\tdxzs.cfg",
                Encoding.GetEncoding("GBK"));

            // 解析行业代码和名称
            foreach (string line in tdxzsLines)
            {
                string[] parts = line.Split('|');
                if (parts.Length == 6 && parts[5].StartsWith("T"))
                {
                    string industryName = parts[0];
                    string industryCode = parts[5];

                    if (!industryCodeToName.ContainsKey(industryCode))
                    {
                        industryCodeToName.Add(industryCode, industryName);
                    }
                }
            }

            // 读取股票行业归属配置文件 tdxhy.cfg
            string[] tdxhyLines = File.ReadAllLines(
                @"D:\Program Files\TDX2\T0002\hq_cache\tdxhy.cfg",
                Encoding.GetEncoding("GBK"));

            // 创建股票代码到行业代码的映射
            Dictionary<string, string> stockToIndustryCode = new Dictionary<string, string>();

            foreach (string line in tdxhyLines)
            {
                string[] parts = line.Split('|');
                if (parts.Length == 6)
                {
                    string stockCode = parts[1];
                    string industryCode = parts[2];

                    stockToIndustryCode[stockCode] = industryCode;
                }
            }

            // 创建行业名称到股票列表的映射
            Dictionary<string, List<string>> industryToStocks = new Dictionary<string, List<string>>();

            // 整理数据，将股票按行业分组
            foreach (var stockPair in stockToIndustryCode)
            {
                string stockCode = stockPair.Key;
                string industryCode = stockPair.Value;

                if (industryCodeToName.ContainsKey(industryCode))
                {
                    string industryName = industryCodeToName[industryCode];

                    if (!industryToStocks.ContainsKey(industryName))
                    {
                        industryToStocks[industryName] = new List<string>();
                    }

                    industryToStocks[industryName].Add(stockCode);
                }
            }

            // 按行业名称排序
            var sortedIndustries = industryToStocks.Keys.OrderBy(k => k).ToList();

            // 程序所在目录
            string outputPath = Path.Combine(Application.StartupPath, "行业板块.csv");
            string backupPath = Path.Combine(Application.StartupPath, "行业板块.bak");

            // 判断是否存在同名文件，若存在则备份
            if (File.Exists(outputPath))
            {
                if (File.Exists(backupPath))
                    File.Delete(backupPath);
                File.Move(outputPath, backupPath);
            }

            // 将所有行业的股票整理成CSV格式
            using (StreamWriter writer = new StreamWriter(outputPath, false,
                Encoding.GetEncoding("GBK")))
            {
                // 写入表头（行业名称）
                writer.WriteLine(string.Join(",", sortedIndustries));

                // 确定最大行数（找出股票数量最多的行业）
                int maxRows = 0;
                foreach (var industry in sortedIndustries)
                {
                    maxRows = Math.Max(maxRows, industryToStocks[industry].Count);
                }

                // 确保最少有400行
                maxRows = Math.Max(maxRows, 400);

                // 写入股票数据
                for (int row = 0; row < maxRows; row++)
                {
                    List<string> rowData = new List<string>();

                    foreach (var industry in sortedIndustries)
                    {
                        if (row < industryToStocks[industry].Count)
                        {
                            rowData.Add(industryToStocks[industry][row]);
                        }
                        else
                        {
                            rowData.Add("");
                        }
                    }

                    writer.WriteLine(string.Join(",", rowData));
                }
            }
        }
    }
}
